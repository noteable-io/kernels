"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[770],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},g="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),g=u(n),c=a,m=g["".concat(p,".").concat(c)]||g[c]||s[c]||l;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[g]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:2,title:"Build a Kernel"},i=void 0,o={unversionedId:"getting-started/building-an-image",id:"getting-started/building-an-image",title:"Build a Kernel",description:"After making any required modifications to your kernel, the project uses",source:"@site/docs/getting-started/building-an-image.md",sourceDirName:"getting-started",slug:"/getting-started/building-an-image",permalink:"/kernels/getting-started/building-an-image",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Build a Kernel"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/kernels/getting-started/installation"},next:{title:"Using your Kernel",permalink:"/kernels/getting-started/using-your-kernel"}},p={},u=[{value:"Supported Build Targets",id:"supported-build-targets",level:2},{value:"Building a Kernel",id:"building-a-kernel",level:2}],d={toc:u},g="wrapper";function s(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"After making any required modifications to your kernel, the project uses"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker buildx bake\n")),(0,a.kt)("p",null,"to build the various Docker images. Each kernel can be targeted specifically,\nor if needed, any of the configured groups of images can be built together"),(0,a.kt)("h2",{id:"supported-build-targets"},"Supported Build Targets"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Bake Target"),(0,a.kt)("th",{parentName:"tr",align:null},"Language"),(0,a.kt)("th",{parentName:"tr",align:null},"Version"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"python_3_9")),(0,a.kt)("td",{parentName:"tr",align:null},"Python"),(0,a.kt)("td",{parentName:"tr",align:null},"3.9"),(0,a.kt)("td",{parentName:"tr",align:null},"CPU")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"python_3_10")),(0,a.kt)("td",{parentName:"tr",align:null},"Python"),(0,a.kt)("td",{parentName:"tr",align:null},"3.10"),(0,a.kt)("td",{parentName:"tr",align:null},"CPU")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"python_3_9_gpu")),(0,a.kt)("td",{parentName:"tr",align:null},"Python"),(0,a.kt)("td",{parentName:"tr",align:null},"3.9"),(0,a.kt)("td",{parentName:"tr",align:null},"GPU")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"python_3_10_gpu")),(0,a.kt)("td",{parentName:"tr",align:null},"Python"),(0,a.kt)("td",{parentName:"tr",align:null},"3.10"),(0,a.kt)("td",{parentName:"tr",align:null},"GPU")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"rlang_4_3_0")),(0,a.kt)("td",{parentName:"tr",align:null},"R"),(0,a.kt)("td",{parentName:"tr",align:null},"4.3.0"),(0,a.kt)("td",{parentName:"tr",align:null},"CPU")))),(0,a.kt)("h2",{id:"building-a-kernel"},"Building a Kernel"),(0,a.kt)("p",null,"TODO: Cleanup around Task copying of files where needed"),(0,a.kt)("p",null,"Once necessary files have been copied, ",(0,a.kt)("inlineCode",{parentName:"p"},"bake")," can be executed. This will build\nthe requested target, and any required parent images"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"task prep:${target}\ndocker buildx bake ${target}\n")))}s.isMDXComponent=!0}}]);