name: docker

on:
  workflow_call:
    inputs:
      dockerfile:
        description: "Path to the Dockerfile to build"
        type: string
        default: Dockerfile
      context:
        description: "The context for Docker build"
        type: string
        default: "."
      platforms:
        description: "Comma separate list of platforms to build on"
        type: string
        required: false
        default: "linux/amd64,linux/arm64"
      images:
        description: "The image names that we want to build"
        type: string
        required: true
      tags:
        description: "The various tags to be attached to the built image"
        type: string
        required: false
        default: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,format=long,prefix=
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      labels:
        description: "The various labels to attach to the built image"
        type: string
        required: false
        default: |
          org.opencontainers.image.url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          org.opencontainers.image.vendor=Noteable
          org.opencontainers.image.version=${{ github.ref }}
      target:
        description: "Sets the target stage to build"
        type: string
        required: false
    secrets:
      # We login to Dockerhub to prevent rate limiting issues when pulling images
      # https://docs.docker.com/docker-hub/download-rate-limit/
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

jobs:
  build:
    permissions:
      id-token: write
      contents: read
      packages: write

    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.state == 'open')
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.10.1

      # Note: The outputs in github action will show duplicate labels being generated for the meta outputs.
      # When the Docker engine builds, it will only take the later values, and our custom labels get added
      # at the end. https://github.com/docker/metadata-action/issues/125
      - name: Docker metadata for labels and tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.images }}
          tags: ${{ inputs.tags }}
          labels: ${{ inputs.labels }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          platforms: ${{ inputs.platforms }}
          context: ${{ inputs.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ inputs.target }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  clear_cache:
    permissions:
      contents: read
      actions: write
    # If the PR is closed (or merged), we want to clear the cache
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.state == 'closed' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
